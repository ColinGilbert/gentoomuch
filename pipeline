#!/usr/bin/env python3

import sys, os, re
from include.munging import stage3, munger
from include.gentoomuch_common import read_file_lines, write_file_lines, read_by_tokens, output_path, portage_config_path, stage_defines_path, cpu_path, pkgset_path, patches_path, local_config_basepath, hooks_path, kernel_path, global_config_path, get_cleaned_path
from include.create_composefile import create_composefile

builder           = 'gentoomuch-builder'
rebuild_emptytree = 'emerge -uDkqa --changed-use --emptytree @world'

msg_prefix = '[GentooMuch.pipeline] '

sets_output_path = os.path.join(output_path, 'sets')
patches_output_path = os.path.join(output_path, 'patches')

debug = True

def run_container(root, command):
    return 'docker-compose run ' + root + ' ' + command

def build(packageset):
    return 'emerge -uDkq --changed-use @' + packageset

def install(packageset):
    return "FEATURES='usepkgonly' " + build(packageset)

# Now, we loop over the file defining what we'll build.
build_list = read_file_lines('./config/stages.build')
#for l in build_list:
l = 'gentoomuch/builder'
combiner = portage_directory_combiner()
combiner.process_stage_defines(l)
#if not os.path.isdir(output_path):
#    os.mkdir(output_path)
#code = os.system('rm -rf ./work/portage/*')
#accum.ingest('./config/portage.locals/gentoomuch/test')
#for line in build_list:
#    # Travel to the directory
#    #code = accum.ingest()
#    #if code == False:
#    #    sys.exit("Error! Config failed for " + line)
#    # Rebuild all packages to be made
#    # code = os.system(run_container(builder, rebuild_emptytree))
#    # if code == 0:
#    #    sys.exit('Could not run container build: ' + line)
