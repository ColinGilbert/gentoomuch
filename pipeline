#!/usr/bin/env python3

import sys, os, re
from include.munging import stage3_config, read_by_tokens, read_file_lines, write_file_lines
from typing import Dict, List, Set


builder           = 'zentoo-builder'
rebuild_emptytree = 'emerge -uDkqa --changed-use --emptytree @world'

msg_prefix = '[Zentoo.pipeline] '

def run_container(root, command):
    return 'docker-compose run ' + root + ' ' + command

def build(packageset):
    return 'emerge -uDkq --changed-use @' + packageset

def install(packageset):
    return "FEATURES='usepkgonly' " + build(packageset)

#TODO: Optimize into a single "docker-compose run"

# We run the initial bootstrap
#code = os.system("docker-compose down && docker-compose up -d")
#if code != 0:
#    sys.exit("Could not run Docker Compose!")
#for build in build_list:

todo = dict()
# Switch to our original bootstrap config (fixes a recursive dep)
code = stage3_config('zentoo/bootstrap', todo)
if code == False:
    print("Error! Bootstrap config failed.")

# Rebuild all packages to be made
code = os.system(run_container(builder, rebuild_emptytree))
if not code == 0:
    sys.exit('Could not run bootstrap container build')

todo = dict()
# Checkout to our build-master configuration
code = stage3_config('zentoo/builder', todo)
if code == False:
    sys.exit("Error! Build-master config failed!")

# Build that buildserver!
code = os.system(run_container(builder, build("zentoo/builder")))
if not code == 0:
    sys.exit('Could not run build-server build')

# Now, we loop over the file defining what we'll build
build_list = read_file_lines('./config/stages.build')

#for build in build_list:
    
