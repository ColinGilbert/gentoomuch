#!/usr/bin/env python3

import os, sys
from include.common import read_file_lines, write_file_lines

builder_str = 'builder'
packer_str = 'packer'

def zentoo_config(is_builder_arg):
    # Our results will be a list of strings
    results = [] 
    # First, we define whether this'll be a builder or a packer
    if is_builder_arg:
        results.append('  zentoo-' + builder_str + ':\n')
    else:
        results.append('  zentoo-' + packer_str + ':\n')
    # We append the runiversal parts
    results.append('    image: localhost:5000/zentoo-stage3\n')
    results.append('    networks:\n')
    results.append('    - backend\n')
    results.append('    volumes:\n')
    results.append('    - /dev:/dev\n')
    results.append('    - /proc:/proc\n')
    results.append('    - /sys:/sys:ro\n')
    # These are the parts that have different permissions between the two types of containers
    binpkg_str =    '    - binpkgs:/var/cache/binpkgs'
    distfiles_str = '    - distfiles:/var/cache/distfiles'
    ebuilds_str =   '    - ebuilds:/var/db/repos/gentoo'
    stages_str =    '    - stages:/mnt/stages'
    kernels_str =   '    - kernels:/mnt/kernels'
    user_data_str = '    - user-data:/mnt/user-data'
    dataout_str =   '    - data-out:/mnt/data-out'
    # Here we actually write these differential parts into our list.
    if is_builder_arg:
        results.append(binpkg_str + '\n')
        results.append(distfiles_str +'\n')
        results.append(ebuilds_str + '\n')
        results.append(stages_str + ':ro\n')
        results.append(kernels_str + '\n')
        results.append(user_data_str + ':ro\n')
    else:
        results.append(binpkg_str + ':ro\n')
        results.append(distfiles_str + ':ro\n')
        results.append(ebuilds_str + ':ro\n')
        results.append(stages_str + '\n')
        results.append(kernels_str + ':ro\n')
        results.append(user_data_str + ':ro\n')
    # Here we loop over the all the files in the config/portage directory and add them 
    portage = '/portage/'
    portage_cfg = './config' + portage
    portage_tgt = '/etc' + portage
    files = [f for f in os.listdir(portage_cfg) if os.path.isfile(os.path.join(portage_cfg, f))]
    for f in files:
        if f != '.gitignore':
            results.append('    - ' + portage_cfg + f + ':' + portage_tgt + f + ':ro\n')
    # We also do the same for the directories
    dirs = [f for f in os.listdir(portage_cfg) if os.path.isdir(os.path.join(portage_cfg, f))]
    for d in dirs:
        if d != '.git':
            results.append('    - ' + portage_cfg + d + ':' + portage_tgt + d + ':ro\n')
    
    
    results.append('    tmpfs:\n      - /mnt/temp\n')
    # Finally, we return the list of string
    return results


# Some variables
is_both = True
is_builder = False
is_packer = False
# If we have an at least an argument, which means we specify either a builder or a packer 
if len(sys.argv) >= 2:
    is_both = False
    arg = sys[1].strip()
    if arg != builder_str and arg != packer_str: # Bad argument
        sys.exit('Usage:\n  geninfra\n  geninfra { ' + builder_str + ' | ' + packer_str + ' }')

# First line in the docker-compose file!
lines = ['# Do not make changes to this file, as they will be overriden next time ./create-composefile is called!\n' , 'services:\n']
# Here, we will write either one, the other, or both...
if is_both == False:
    if is_builder:
        lines.extend(zentoo_config(True))
    else:
        lines.extend(zentoo_config(False))
else:
    lines.extend(zentoo_config(True))
    lines.extend(zentoo_config(False))


include_prefix = 'include/docker-compose/docker-compose.'


# The latter two are commented-out, but different branches hold different setups.
# Select the ones you want by uncommenting them
lines.extend(read_file_lines(include_prefix + 'httpserver'))
lines.extend(read_file_lines(include_prefix + 'rsyncd'))

# This line is mzndatory
lines.extend(read_file_lines(include_prefix + 'tail'))


# Here, we actually end actually writing the file, and we're done!
write_file_lines('docker-compose.yml', lines)
