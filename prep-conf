#!/usr/bin/env python3

import os, sys, re
from include.common import read_by_tokens, read_file_lines, write_file_lines
from typing import Dict, List, Set

msg_prefix       = '[Zentoo.prep-conf] '
config_dir      = './config/'
stage_path       = config_dir + 'stage.defines/'
cpu_path         = config_dir + 'cpu.defines/'
pkgset_path      = config_dir + 'portage.global/'
flagset_path     = config_dir + 'portage.configs/'
hooks_path       = config_dir + 'build.hooks/'
#kernel_path     = config_dir + 'kernel.defines/'

def get_flagname(flag_str):
    return re.sub('^(-)+', '', flag_str)


def get_flagname_test():
    if not get_flagname('silly-thing/dontchangeme') == 'silly-thing/dontchangeme':
        sys.exit("Failed get_flagname test: Should not change flags' contents.")
    if not get_flagname('-silly-thing/testme') == 'silly-thing/testme':
        sys.exit('Failed get_flagname test: Single neg.')
    if not get_flagname('--silly-thing/testmemore') == 'silly-thing/testmemore':
        sys.exit('Failed get_flagname test: Multiple negative signs.')
    if not get_flagname('-') == '':
        sys.exit('Failed get_flagname test: Empty flag.')

get_flagname_test()

# This deduplicates keywords and verifies for set/unset combinations.
# TODO: Merge with ingest_*()???
def ingest_conf(file_content_list, variables_to_flags):
    for line in file_content_list:
        print('ZENTOO DEBUG - line: ' + line)
        line = re.sub('[=|\'|"]+', ' ', line) # Strip out troublesome characters
        variable_name = re.match('^[\S]+', line).group()
        print ('ZENTOO DEBUG - line (cleaned): ' + line)

        print ('ZENTOO DEBUG - variable name: ' + variable_name)
        
        flags_str = re.sub(variable_name, '', line)
        print('ZENTOO DEBUG - flags string: ' + flags_str)
        
        if variable_name in variables_to_flags.keys(): # Handle the case involving flags being added to an existing variable
            for candidate_flag in flags_str.split(' '):
                if candidate_flag.strip() == '':
                    break
                if candidate_flag in variables_to_flags[variable_name]:
                    break
                fully_qualified_flag = get_flagname(candidate_flag)
                if fully_qualified_flag in variables_to_flags[variable_name]:
                    print(msg_prefix + ' Variable ' + variable_name  + "'s flag " + fully_qualified_flag + ' cannot be both  set and unset.')
                    return False
                else:
                    variables_to_flags[variable_name].append(candidate_flag)
        else: # We insert by reading whitespace-separated contents.
            variables_to_flags[variable_name] = []
            for flag in flags_str.split(' '):
                if not flag.strip() == '':
                    variables_to_flags[variable_name].append(flag)
    return True


# Determine equivalence partitions.
def ingest_conf_test():
    desired = { 'AB': ['-awful', 'nice-enough'] }

    test_1 = ['AB="-awful nice-enough"']
    results = {}
    if not ingest_conf(test_1, results):
        sys.exit('Failed ingest_conf: testset1. Should return true.')
    if not results == desired:
        print(results)
        sys.exit('Failed ingest_conf: testset1. Bad results')
    else:
        sys.exit('ingest_conf test 1: SUCCESS!')
   # test_2 = 'AB = -awful nice-enough -awful'
   # if not ingest_conf(test_2, results):
   #    sys.exit('Failed ingest_conf: testset2. Should return true.')
   # if not results == desired:
   #     sys.exit('Failed ingest_conf: testset2. Results: ' + print(results))

   # test_3 = 'AB="-awful nice-enough awful"'
   # if ingest_conf(test_3, results):
   #     sys.exit('Failed ingest_conf: testset3 (yes and no). Should return false.')
   # if not results == desired:
   #     sys.exit('Failed ingest_conf: testset3 (yes and no). Results: ' + print(results))
   
   #  test_4 = "AB='nice-enough -awful nice-enough nice-enough'"
   #  if not ingest_conf(test_4, results):
   #      sys.exit('Failed ingest_conf: testset4. Should return true.')
   #  if not results == desired:
   #      sys.exit('Failed ingest_conf: testset4. Results: ' + (results))

ingest_conf_test()
