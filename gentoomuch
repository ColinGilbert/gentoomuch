#!/usr/bin/env python3

import os, sys, re

from include.gentoomuch_common import arch_config_path, uid_config_path, read_file_lines, write_file_lines, config_path, output_path
from include.freshroot import freshroot
from include.sync import sync
from include.swap_stage import swap_stage
from include.pull_stage import pull_stage
from include.composefile import create_composefile
from include.get_active_stage import get_active_stage

verbs = ('ls', 'set', 'sync', 'pipeline', 'sandbox')
nouns = ('profile', 'stage')

verb = ''
noun = ''
target = ''

arg_len = len(sys.argv)

usage = "Usage: gentoomuch "

def print_usage_ls():
    print(usage + 'ls profile[s]')
    print(usage + 'ls stage[s]')

def print_usage_set():
    print(usage + 'set profile <number|name>')
    print(usage + 'set stage <number|name>')

def print_usage_sandbox():
    print(usage + 'sandbox')

def print_usage_pipeline():
    print(usage + 'pipeline')

def print_usage_sync():
    print(usage + 'sync')

def print_usage():
    print_usage_sandbox()
    print_usage_pipeline()
    print_usage_sync()
    print_usage_ls()
    print_usage_set()

if arg_len > 1:
    verb = sys.argv[1]
elif arg_len > 2:
    noun = sys.argv[2]
    num_nouns = len(nouns)
elif arg_len > 3:
    target = sys.argv[3]
else:
    print_usage()
    sys.exit()

# First, we always create a fresh composefile
arch = open(arch_config_path).read().strip()
create_composefile(output_path)
swap_stage(arch, 'default', 'gentoomuch/builder')

# We can handle the single-verb commands
if verb == 'sandbox':
    swap_stage(arch, 'default', 'gentoomuch/builder')
    create_composefile(output_path)
    freshroot()
elif verb == 'pipeline':
    print('Running pipeline')
    # Get stage defines from buildlist
    # Validate stage defines
    # Process stage defines
elif verb == 'sync':
    create_composefile(output_path)
    sync()
elif verb == 'ls':
    if arg_len == 3:
        if re.search('profile[s]', noun):
            print('Listing profiles')
        elif re.search('stage[s]', noun):
            print('Listing stages!')
        else:
            print_usage_ls()
            sys.exit()
    else:
        print_usage_ls()
        sys.exit()
elif verb == 'set':
    if noun == 'profile':
        print("Setting profile")
    elif noun == 'stage':
        print("Setting stage")
    else:
        print_usage_set()
        sys.exit()
else:
    print_usage()
    sys.exit()


    stage = get_active_stage()
    create_composefile(output_path)
#pull_stage(arch, 'default')
#sync()
#freshroot()
    active_stage = get_active_stage()
    print('ARCH: ' + active_stage.arch)
    print('PROFILE: ' + active_stage.profile)
    print('STAGE_DEF: ' + active_stage.stage_define)
    print('UPSTREAM ' + str(active_stage.upstream))
# stage = get_stage_tuple()
