#!/usr/bin/env python3

import os, sys, re

from include.gentoomuch_common import arch_config_path, uid_config_path, read_file_lines, write_file_lines, config_path, output_path, profiles_amd64
from include.freshroot import freshroot
from include.sync import sync
from include.swap_stage import swap_stage
from include.pull_stage import pull_stage
from include.composefile import create_composefile
from include.get_active_stage import get_active_stage
from include.list_stages import list_stages
from include.list_profiles import list_profiles
from include.set_stage import set_stage
from include.set_profile import set_profile

ls_str = 'ls'
set_str = 'set'
sync_str = 'sync'
pipeline_str = 'pipeline'
freshroot_str = 'freshroot'
bootstrap_str = 'bootstrap'
profile_str = 'profile'
stage_str = 'stage'

nouns = (profile_str, stage_str, sync_str, pipeline_str, freshroot_str, bootstrap_str)
verbs = (ls_str, set_str)

noun = ''
verb = ''
target = ''

arg_len = len(sys.argv)

usage = "Usage: gentoomuch "

# Print usage messages.
def print_usage_stages():
    print(usage + stage_str + ' ' + set_str +  ' <number|name>')
    print(usage + stage_str + ' ' + ls_str +  ' <number|name>')

def print_usage_profiles():
    print(usage + profile_str + ' ' + set_str + ' <number|name>')
    print(usage + profile_str + ' ' + ls_str +  ' <number|name>')

def print_usage_bootstrap():
    print(usage + bootstrap_str + ' <number|name>')

def print_usage():
    print(usage + freshroot_str)
    print(usage + pipeline_str)
    print(usage + sync_str)

# Ingest arguments.
if arg_len > 1:
    noun = sys.argv[1]
    if not noun in nouns:
      print_usage()
      exit()
if arg_len > 2:
    verb = sys.argv[2]
    if not verb in verbs:
      if noun == ls_str:
        print_usage_ls()
        exit()
      if noun == set_str:
        print_usage_set()
        exit()
if arg_len == 4: 
    target = sys.argv[3]
if arg_len < 1 or arg_len > 4:
    print_usage()
    exit()

# Let's do this!
# First, we always create a fresh composefile.
arch = open(arch_config_path).read().strip()
create_composefile(output_path)
# We can handle the single-verb commands.
if noun == freshroot_str: # Create a fresh root
  # Swap_stage(arch, 'default', 'gentoomuch/builder')
  create_composefile(output_path)
  freshroot()
elif noun == pipeline_str: # Run your pipelined builds
  print('Running pipeline')
  # Get stage defines from buildlist and build them.
  # TODO: Implement
elif noun == sync_str: # Sync portage
  create_composefile(output_path)
  sync()
elif noun == bootstrap_str:
  # TODO: Implement
  exit()
elif noun == profile_str: # Profiles...
  if verb == ls_str: # List system profiles.
    list_profiles()
    exit()
  elif verb == set_str: # Setting profiles.
    if arg_len == 4:
      set_profile(target)
      exit()
  else: # Error message
    print_usage_profiles() 
    exit()
elif noun == stage_str: # Stages...
  if verb == ls_str: # Set the profile.
    list_stages()
    exit()
  elif verb == set_str: # Set the stage.
    if arg_len == 4:
      set_stage(target)
      exit()
  else: # Error message
    print_usage_stages()
    exit()
else: # Error message
  print_usage()
  exit()
