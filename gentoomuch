#!/usr/bin/env python3

import os, sys, re
from typing import Tuple
from include.gentoomuch_common import arch_config_path, config_path, output_path, usage_str, saved_patches_path, stages_path
from include.freshroot import freshroot
from include.sync import sync, has_sync_happened, set_sync_happened
from include.swap_stage import swap_stage
from include.composefile import create_composefile
from include.tag_parser import tag_parser
from include.get_active_stage import get_active_stage
from include.list_stages import list_stages
from include.list_profiles import list_profiles
from include.set_desired_stage import set_desired_stage
from include.set_desired_profile import set_desired_profile
from include.get_desired_stage import get_desired_stage
from include.get_desired_profile import get_desired_profile
from include.run_build import run_build
from include.get_docker_tag import get_docker_tag
from include.save_tarball import save_tarball
from include.load_tarball import load_tarball
from include.patches import prep_patch, try_patch, save_patch
from include.ui_patch_prep_handler import ui_patch_prep_handler, prep_str
from include.get_profiles import get_profiles
from include.remove_old_docker_images import remove_old_docker_images
from include.kernel_handler import kernel_handler, test_kernel_handler
from include.containerize import containerize

# Our commandline keywords
ls_str          = 'ls'
set_str         = 'set'
get_str         = 'get'
rm_str          = 'rm'
sync_str        = 'sync'
patch_str       = 'patch'
config_str      = 'config'
build_str       = 'build'
pipeline_str    = 'pipeline'
freshroot_str   = 'freshroot'
bootstrap_str   = 'bootstrap'
profile_str     = 'profile'
stage_str       = 'stage'
patch_str       = 'patch'
all_str         = 'all'
prep_str        = 'prep'
try_str         = 'try'
save_str        = 'save'
clean_str       = 'clean'
apply_str       = 'apply'
kernel_str      = 'kernel'
sources_str     = 'sources'
test_str        = 'test'

# First word after the "gentoomuch" command.
primary_commands = (profile_str, stage_str, sync_str, pipeline_str, freshroot_str, bootstrap_str, patch_str, kernel_str, clean_str, test_str )
# Commands you can use ls and set to visualize and manipulate.
#ls_and_set_usedwiths = (profile_str, stage_str)
# 
#verbs = (ls_str, set_str)

# Here we define CLI help functions for when the user needs it.

# Print usage_str messages.
def print_usage_stage():
    print(usage_str + stage_str + ' ' + ls_str)
    print(usage_str + stage_str + ' ' + set_str + ' <stage.definition>')
    print(usage_str + stage_str + ' ' + build_str + ' <profile.name> <stage.definition>')
    print(usage_str + stage_str + ' ' + build_str + ' <profile.name> <stage.definition> <kernel.definition>')


def print_usage_kernel():
    print(usage_str + kernel_str + ' ' + prep_str + ' <kernel.defines.name>')
    print(usage_str + kernel_str + ' ' + build_str + ' <kernel.defines.name>')

def print_usage_profile():
    print(usage_str + profile_str + ' ' + ls_str)
    print(usage_str + profile_str + ' ' + set_str + ' <profile.name>')

def print_usage_bootstrap():
    print(usage_str + bootstrap_str + ' <profile.name> <tarball.filename>')

def print_usage_patch():
    patch_usage = usage_str + patch_str + ' '
    print(patch_usage + prep_str + '  <patch.name> <package.name> <version-str>')
    print(patch_usage + try_str + ' <patch.name>')
    print(patch_usage + save_str + ' <patch.name>')
    print(patch_usage + apply_str)

def print_no_profile():
    print("You need to set a base profile before continuing.")

def print_usage():
    print(usage_str + freshroot_str)
    print(usage_str + pipeline_str)
    print(usage_str + sync_str)
    print_usage_bootstrap()
    print_usage_profile()
    print_usage_stage()
    print_usage_kernel()
    print(usage_str + clean_str)

# We do this every time!
arch = open(arch_config_path).read().strip()


#get_profiles()

# Now, we get properly started.
########################
# Get the first command.
########################
prime_cmd = ''
if len(sys.argv) > 1:
    if sys.argv[1] in primary_commands:
        prime_cmd = sys.argv[1]
    else:
        print_usage()
        exit()
##############################################
# Stage definitions-related commands (ls/set).
##############################################
if prime_cmd == stage_str:
    if sys.argv[2] == ls_str and len(sys.argv) == 3: # Listing stages
        list_stages()
        exit()
    elif sys.argv[2] == set_str and len(sys.argv) == 4: # Setting stage
        if not sys.argv[3].isnumeric():
            set_desired_stage(sys.argv[3])
        else:
            print("You need to set a stage by name, as numbers will change over time.")
        exit()
    elif sys.argv[2] == build_str and len(sys.argv) == 5: # Building stage 3
        valid, archive_name =  save_tarball(arch, sys.argv[3], sys.argv[4], False)
        if valid:
            print("SAVED STAGE3 " + archive_name)
    elif sys.argv[2] == build_str and len(sys.argv) == 6: # Building stage 4
        #save_tarball(arch: str, profile: str, stage_define: str, upstream: bool, patches: [str] = [], patches_have_been_compiled: bool = True, kernel_defines: str = '', module_paths_to_sign: [str] = [], hash_algorithm: str = 'sha512'): 
        modules = []
        valid, archive_name = save_tarball(arch, profile = sys.argv[3], stage_define = sys.argv[4], upstream = False, patches = [], patches_have_been_compiled = False, kernel_defines = sys.argv[5], modules_to_sign = modules, hash_algorithm = 'sha512')
        if valid:
            print("SAVED STAGE4 " + archive_name)
    else: # Error message for stages
        print_usage_stage()
        exit()
###################################
# Profile-related command (ls/set).
###################################
elif prime_cmd == profile_str:
    if sys.argv[2] == ls_str and len(sys.argv) == 3: # Listing profiles
        list_profiles(arch)
        exit()
    elif sys.argv[2] == set_str and len(sys.argv) == 4: # Setting profile
        if not sys.argv[3].isnumeric():
            set_desired_profile(arch, profile, get_gentoomuch_jobs(), sys.argv[3])
        else:
            print("You need to set a profile by name.")
        exit()
    else: # Error message for profile
        print_usage_profile() 
        exit()
#############################################
# Bootstrap a stage from a tarball.
#############################################
elif prime_cmd == bootstrap_str:
    if not len(sys.argv) == 4:
        print_usage_bootstrap()
        exit()
    profile = sys.argv[2]
    code = create_composefile(output_path)
    if code:
      pass
    path = os.path.join(os.getcwd(), sys.argv[3])
    code = load_tarball(arch, profile, path)
    if not code:
        exit("Failed to load tarball")
    if not has_sync_happened():
        print("Syncing for first time!")
        code = sync()
        if code != 0:
            exit("Could not sync")
        else:
            set_sync_happened()
    valid, archive_name = save_tarball(arch, profile, "gentoomuch/builder", True)
    if valid:
        results = containerize(os.path.join(stages_path, archive_name), arch, profile, 'gentoomuch/builder', False)
        if results:
            print("******************************************************************************************************************")
            print("***        CONGRATULATIONS! YOU HAVE JUST BOOTSTRAPPED A PROPER, OPTIMIZED, DOCKERIZED GENTOO STAGE3!          ***")
            print("******************************************************************************************************************")
            print("***                                                LIKE A BOSS!                                                ***")
            print("******************************************************************************************************************")
        else:
            exit("GENTOOMUCH: Failed to containerize bootstrapped stage")
    exit()
##################
# Handle patching.
##################
elif prime_cmd == patch_str:
    error_str = usage_str
    if len(sys.argv) == 2:
        print_usage_patch()
    if len(sys.argv) > 2 and sys.argv[2] == prep_str:
        ui_patch_prep_handler(3).handle()
    elif len(sys.argv) > 2 and sys.argv[2] == try_str:
        if len(sys.argv) > 3:
            patch_name = sys.argv[3]
            #print(patch_name)
            valid, profile = get_desired_profile()
            if valid:
                try_patch(profile, patch_name)
            else:
                exit("Need to have a profile set.")
        else:
            exit("You need to provide a patch name to try.")
    # We save a patch to our config/patches directory
    elif len(sys.argv) > 2 and sys.argv[2] == save_str:
        if len(sys.argv) > 3:
            patch_name = sys.argv[3]
            save_patch(patch_name)
        else:
            exit("Which patch do you wish to save?")
    elif len(sys.argv) > 2 and sys.argv[2] == apply_str:
        patches= []
        for patch in os.listdir(saved_patches_path):
            #TODO: Collect patch names into list
            if patch != "README.md":
                patches.append(patch)
        profiles = get_profiles()
        for profile in profiles: 
            valid, name = save_tarball(arch, profile, "gentoomuch/builder", False, patches, False)
            if valid:
               results = containerize(os.path.join(stages_path, name), arch, profile, 'gentoomuch/builder', False)
               if not results:
                exit("GENTOOMUCH: Failed to containerize patched stage")
            #TODO: Add the rest in the pipeline
    else:
        print_usage_patch()
    exit()
##############################
# Handle kernel-related tasks   
##############################
elif prime_cmd == kernel_str:
    if len(sys.argv) > 2 and sys.argv[2] == prep_str:
        if not len(sys.argv) > 3:
            exit("Need a kernel definition to prep kernel.")
        handler = kernel_handler()
        valid, profile = get_desired_profile()
        if valid:
            handler.prep_kernel_config(arch, profile, sys.argv[3])
        else:
            exit("You need to select a profile!")
    elif len(sys.argv) > 2 and sys.argv[2] == build_str:
        if not len(sys.argv) > 3:
            exit("Need a kernel definition to compile kernel.")
        handler = kernel_handler()
        valid, profile = get_desired_profile()
        if valid:
            handler.build_kernel(arch, profile, 8, sys.argv[3])
        else:
            exit("You need to select a profile!")
    else:
        print_usage_kernel()
##################################
# Deal with the freshroot command. 
##################################
elif prime_cmd == freshroot_str:
    valid, profile = get_desired_profile()
    if valid: 
        freshroot(arch, profile)
    else:
        exit("You need to set a profile!")
#######################
# Run pipelined builds.
#######################
elif prime_cmd == pipeline_str:
    print('Running pipeline')
    # Get stage 3 defines and build them
    # Get kernel defines and build them
    # Get stage 4 defines and build them
    # Cleanup keys from kernel build directory
####################
# Sync Portage tree. 
####################
elif prime_cmd == sync_str:
    if has_sync_happened():
        valid, profile = get_desired_profile()
        if valid:
            swap_stage(arch, profile, 'gentoomuch/builder', False)
            sync()
        else:
            exit("Need to select a profile prior to sync.")
    else:
        exit("Need to bootstrap a profile prior to first sync")
elif prime_cmd == clean_str:
    remove_old_docker_images()
    # code = os.system("rm -rf " + stages_path + "/*")
    # if code == 0:
    #     pass
elif prime_cmd == "test":
    test_kernel_handler()
else:
    print_usage()