#!/usr/bin/env python3

import os, sys, re

from include.gentoomuch_common import arch_config_path, config_path, output_path, profiles_amd64
from include.freshroot import freshroot
from include.sync import sync
from include.swap_stage import swap_stage
from include.composefile import create_composefile
from include.tag_parser import tag_parser
from include.get_active_stage import get_active_stage
from include.list_stages import list_stages
from include.list_profiles import list_profiles
from include.set_desired_stage import set_desired_stage
from include.set_desired_profile import set_desired_profile
from include.get_desired_stage import get_desired_stage
from include.get_desired_profile import get_desired_profile
from include.run_build import run_build
from include.get_docker_tag import get_docker_tag
from include.save_tarball import save_tarball
from include.download_tarball import download_tarball

# Our commandline keywords
ls_str = 'ls'
set_str = 'set'
sync_str = 'sync'
pipeline_str = 'pipeline'
freshroot_str = 'freshroot'
bootstrap_str = 'bootstrap'
profile_str = 'profile'
stage_str = 'stage'
all_str = 'all'

# First word after the "gentoomuch" command.
primary_commands = (profile_str, stage_str, sync_str, pipeline_str, freshroot_str, bootstrap_str)
# Commands you can use ls and set to visualize and manipulate.
#ls_and_set_usedwiths = (profile_str, stage_str)
# 
#verbs = (ls_str, set_str)

# Here we define CLI help functions for when the user needs it.
usage = "    gentoomuch "

# Print usage messages.
def print_usage_stage_ls():
    print(usage + stage_str + ' ' + ls_str)

def print_usage_stage_set():
    print(usage + stage_str + ' ' + set_str +    ' <name>')

def print_usage_profile_ls():
    print(usage + profile_str + ' ' + ls_str)

def print_usage_profile_set():
    print(usage + profile_str + ' ' + set_str + ' <name>')

def print_usage_stage():
    print_usage_stage_ls()
    print_usage_stage_set()

def print_usage_profile():
    print_usage_profile_ls()
    print_usage_profile_set()

def print_usage_bootstrap():
    print(usage + bootstrap_str + ' <name|"' + all_str +'">')

def print_no_profile():
    print("You need to set a base profile before continuing. Try:")

def print_usage():
    print(usage + freshroot_str)
    print(usage + pipeline_str)
    print(usage + sync_str)
    print_usage_bootstrap()
    print_usage_profile()
    print_usage_stage()

# We do this every time!
arch = open(arch_config_path).read().strip()

# This handles the bootstrap of each stage, from upstream.
def pull_sequence(profile):
    download_tarball(arch, profile)
    #swap_stage(arch, profile, 'gentoomuch/builder')
    #run_build(True)
    save_tarball(arch, profile, 'gentoomuch/builder', True)

# Now, we get properly started.
# Get the first command
prime_cmd = ''
if len(sys.argv) > 1:
    if sys.argv[1] in primary_commands:
        prime_cmd = sys.argv[1]
    else:
        print_usage()
        exit()
# Stage definitions-related commands (ls/set)
if prime_cmd == stage_str:
    if sys.argv[2] == ls_str and len(sys.argv) == 3: # Listing stages
        list_stages()
        exit()
    elif sys.argv[2] == set_str and len(sys.argv) == 4: # Setting stage
        set_desired_stage(sys.argv[3])
        exit()
    else: # Error message for stages
        print_usage_stage()
        exit()
# Profile-related command (ls/set)
elif prime_cmd == profile_str:
    if sys.argv[2] == ls_str and len(sys.argv) == 3: # Listing profiles
        list_profiles()
        exit()
    elif sys.argv[2] == set_str and len(sys.argv) == 4: # Setting profile
        set_desired_profile(sys.argv[3])
        exit()
    else: # Error message for profile
        print_usage_profile() 
        exit()
# Bootstrap a stage from an upstream tarball
elif prime_cmd == bootstrap_str:
    # If we are to pull all stages and bootstrap. Risky and time-consuming.
    if len(sys.argv) > 2 and sys.argv[2] == all_str:
        for p in profiles_amd64:
            pull_sequence(p)
    elif len(sys.argv) > 2 and sys.argv[2] in profiles_amd64:
        pull_sequence(sys.argv[2])
    else:
        exit("Could not find " + sys.argv[2] + " " + " in supported profiles.")
# Deal with the freshroot command
elif prime_cmd == freshroot_str: 
    #swap_stage(arch, 'default', 'gentoomuch/builder')
    freshroot()
# Run pipelined builds
elif prime_cmd == pipeline_str:
    print('Running pipeline')
    # Get stage defines from buildlist and build them.
    # TODO: Implement
# Sync Portage tree.
elif prime_cmd == sync_str:
    swap_stage(arch, 'default', 'gentoomuch/builder', True)
    # create_composefile(output_path)
    sync()
    #TODO: Remount SquashFS
else:
    print_usage()
