#!/usr/bin/env python3

import os, sys, re
from typing import Tuple
from include.gentoomuch_common import arch_config_path, config_path, output_path, usage_str, saved_patches_path, stages_path
from include.init import init
from include.freshroot import freshroot
from include.sync import sync, has_sync_happened, set_sync_happened
from include.swap_stage import swap_stage
from include.create_composefile import create_composefile
from include.tag_parser import tag_parser
from include.list_profiles import list_profiles
from include.set_desired_stage import set_desired_stage
from include.set_desired_profile import set_desired_profile
from include.get_desired_stage import get_desired_stage
from include.get_desired_profile import get_desired_profile
from include.get_docker_tag import get_docker_tag
from include.save_tarball import save_tarball
from include.patches import prep_patch, try_patch, save_patch
from include.ui_patch_prep_handler import ui_patch_prep_handler, prep_str
from include.get_profiles import get_profiles
from include.remove_old_docker_images import remove_old_docker_images
from include.prep_kernel_config import prep_kernel_config
from include.containerize import containerize
from include.pipeline import pipeline
from include.update_kernel import update_kernel
from include.exec_in_chroot import exec_in_chroot
from include.exec_user_hooks import exec_user_hooks
from include.compile_patches import compile_patches
from include.build_stage4 import build_stage4

# Our commandline keywords
init_str        = 'init'
ls_str          = 'ls'
set_str         = 'set'
get_str         = 'get'
rm_str          = 'rm'
sync_str        = 'sync'
patch_str       = 'patch'
config_str      = 'config'
build_str       = 'build'
pipeline_str    = 'pipeline'
freshroot_str   = 'freshroot'
bootstrap_str   = 'bootstrap'
profile_str     = 'profile'
stage_str       = 'stage'
patch_str       = 'patch'
all_str         = 'all'
prep_str        = 'prep'
try_str         = 'try'
save_str        = 'save'
clean_str       = 'clean'
compile_str     = 'compile'
kernel_str      = 'kernel'
sources_str     = 'sources'
test_str        = 'test'
update_str      = 'update'

# First word after the "gentoomuch" command.
primary_commands = (profile_str, stage_str, sync_str, pipeline_str, freshroot_str, bootstrap_str, patch_str, kernel_str, clean_str, test_str, init_str)
# Commands you can use ls and set to visualize and manipulate.
#ls_and_set_usedwiths = (profile_str, stage_str)
# 
#verbs = (ls_str, set_str)

# Here we define CLI help functions for when the user needs it.

def print_usage_init():
    print(usage_str + init_str)

def print_usage_stage():
    print(usage_str + stage_str + ' ' + build_str + ' <stage4.definition>')

def print_usage_kernel():
    print(usage_str + kernel_str + ' ' + prep_str + ' <kernel.config>')
    print(usage_str + kernel_str + ' ' + update_str)

def print_usage_profile():
    print(usage_str + profile_str + ' ' + ls_str)
    print(usage_str + profile_str + ' ' + set_str + ' <profile.name>')

def print_usage_bootstrap():
    print(usage_str + bootstrap_str + ' <profile.name> <tarball.filename>')

def print_usage_patch():
    patch_usage = usage_str + patch_str + ' '
    print(patch_usage + prep_str + '  <patch.name> <package.name> <version-str>')
    print(patch_usage + try_str + ' <patch.name>')
    print(patch_usage + save_str + ' <patch.name>')
    print(patch_usage + compile_str)

def print_no_profile():
    print("You need to set a base profile before continuing.")

def print_usage():
    print_usage_init()
    print(usage_str + freshroot_str)
    print(usage_str + pipeline_str)
    print(usage_str + sync_str)
    print_usage_bootstrap()
    print_usage_profile()
    print_usage_stage()
    print_usage_kernel()
    print_usage_patch()
    print(usage_str + clean_str)

# We do this every time!
if os.path.isfile(arch_config_path):
    with open(arch_config_path) as file:
        arch = file.read().strip()
else:
    exit("You need an arch config (amd64|arm64) at " + arch_config_path)
# Now, we get properly started.
########################
# Get the first command.
########################
prime_cmd = ''
if len(sys.argv) > 1:
    if sys.argv[1] in primary_commands:
        prime_cmd = sys.argv[1]
    else:
        print_usage()
        exit()
##########################
# Initialize temp dirs
##########################
if prime_cmd == init_str:
    init()
##############################################
# Stage related commands (building).
##############################################
elif prime_cmd == stage_str:
    if sys.argv[2] == build_str and len(sys.argv) == 4:
        valid, archive_name = build_stage4(arch, stage4_name = sys.argv[3])
        if valid:
            print("SAVED STAGE4 " + archive_name)
    else: # Error message for stages
        print_usage_stage()
        exit()
###################################
# Profile-related command (ls/set).
###################################
elif prime_cmd == profile_str:
    if len(sys.argv) == 2:
        print_usage_profile()
        exit()
    if sys.argv[2] == ls_str and len(sys.argv) == 3: # Listing profiles
        list_profiles(arch)
        exit()
    elif sys.argv[2] == set_str and len(sys.argv) == 4: # Setting profile
        if not sys.argv[3].isnumeric():
            set_desired_profile(arch, sys.argv[3])
        else:
            print("You need to set a profile by name.")
        exit()
    else: # Error message for profile
        print_usage_profile() 
        exit()
#############################################
# Bootstrap a stage from a tarball.
#############################################
elif prime_cmd == bootstrap_str:
    if not len(sys.argv) == 4:
        print_usage_bootstrap()
        exit()
    profile = sys.argv[2]
    code = create_composefile(output_path)
    if code:
      pass
    path = os.path.join(os.getcwd(), sys.argv[3])
    code = containerize(path, arch, profile, stage_define = '', upstream = True)
    if not code:
        exit("Failed to load tarball")
    if not has_sync_happened():
        print("Syncing for first time!")
        swap_stage(arch, profile, stage_define = 'gentoomuch/builder', upstream = True)
        code = sync()
        if code != 0:
            exit("Could not sync")
        else:
            set_sync_happened()
    valid, archive_name = save_tarball(arch, profile, stage_define = "gentoomuch/builder", upstream = True)
    if valid:
        results = containerize(os.path.join(stages_path, archive_name), arch, profile, stage_define = 'gentoomuch/builder', upstream = False)
        if results:
            print("******************************************************************************************************************")
            print("***        CONGRATULATIONS! YOU HAVE JUST BOOTSTRAPPED A PROPER, OPTIMIZED, DOCKERIZED GENTOO STAGE3!          ***")
            print("******************************************************************************************************************")
            print("***                                                LIKE A BOSS!                                                ***")
            print("******************************************************************************************************************")
        else:
            exit("GENTOOMUCH: Failed to containerize bootstrapped stage")
    exit()
##################
# Handle patching.
##################
elif prime_cmd == patch_str:
    error_str = usage_str
    if len(sys.argv) == 2:
        print_usage_patch()
        exit()
    if len(sys.argv) > 2 and sys.argv[2] == prep_str:
        ui_patch_prep_handler(3).handle()
    elif len(sys.argv) > 2 and sys.argv[2] == try_str:
        if len(sys.argv) > 3:
            patch_name = sys.argv[3]
            #print(patch_name)
            profile = get_desired_profile()
            try_patch(profile, patch_name)
        else:
            exit("You need to provide a patch name to try.")
    # We save a patch to our config/patches directory
    elif len(sys.argv) > 2 and sys.argv[2] == save_str:
        if len(sys.argv) > 3:
            patch_name = sys.argv[3]
            save_patch(patch_name)
        else:
            exit("Which patch do you wish to save?")
    elif len(sys.argv) > 2 and sys.argv[2] == compile_str:
        patches= []
        for patch in os.listdir(saved_patches_path):
            #TODO: Collect patch names into list
            if patch != "README.md":
                patches.append(patch)
        profiles = get_profiles()
        for profile in profiles: 
            valid, name = save_tarball(arch, profile, stage_define = "gentoomuch/builder", upstream =  False, patches = patches, patches_have_been_compiled = False)
            if valid:
               results = containerize(os.path.join(stages_path, name), arch, profile, stage_define = 'gentoomuch/builder', upstream = False)
               if not results:
                exit("GENTOOMUCH: Failed to containerize patched stage")
            else:
                exit("GENTOOMUCH: Failed to save patched stage tarball")
            #TODO: Add the rest in the pipeline
    else:
        print_usage_patch()
    exit()
##############################
# Handle kernel-related tasks   
##############################
elif prime_cmd == kernel_str:
    if len(sys.argv) > 2:
        if sys.argv[2] == prep_str:
            if len(sys.argv) > 3:
                prep_kernel_config(arch, profile = get_desired_profile(), kconf = sys.argv[3])
            else:
                exit("Need a kernel definition to prep kernel.")
        if sys.argv[2] == update_str:
                update_kernel(arch)
    else:
        print_usage_kernel()
        exit()
##################################
# Deal with the freshroot command. 
##################################
elif prime_cmd == freshroot_str:
    freshroot(arch, profile = get_desired_profile())
#######################
# Run pipelined builds.
#######################
elif prime_cmd == pipeline_str:
    print('Running pipeline')
    results = pipeline(arch)
    if results:
        print("PIPELINE SUCCESS")
    else:
        print("PIPELINE FAILURE :(")
####################
# Sync Portage tree. 
####################
elif prime_cmd == sync_str:
    if has_sync_happened():
        profile = get_desired_profile()
        swap_stage(arch, profile, stage_define = 'gentoomuch/builder', upstream = False)
        sync()
    else:
        exit("Need to bootstrap a profile prior to first sync")
#
# Testing
#
elif prime_cmd == test_str:
    print(str(exec_user_hooks(os.path.join(stages_path, 'example-desktop.tar.gz'), scripts = ['example.sh'], removes = ['example'])))
################################
# Clean Gentoomuch environment. 
################################
elif prime_cmd == clean_str:
    remove_old_docker_images()
    code = os.system("rm -rf " + stages_path + "/*")
    if code == 0:
        pass
    code = os.system("docker system prune -f")
    if code == 0:
        pass
elif prime_cmd == test_str:
    result = exec_in_chroot(os.path.join(stages_path, 'TEMP'), "echo HELLO WORLD")
    if result:
        print("Exec in chroot: SUCCESS")
    else:
        print("Exec in chroot: FAILURE")
else:
    print_usage()